# The lookup table
lut <- c("A" = "carrier", "B" = "weather", "C" = "FFA", "D" = "security", "E" = "not cancelled")
# Add the Code column
hflights$Code <- lut[hflights$CancellationCode]
# Glimpse at hflights
glimpse(hflights)
glimpse(hflights)
select(hflights, ActualElapsedTime, AirTime, ArrDelay, DepDelay)
# Print out the columns Origin up to Cancelled of hflights
select(hflights, Origin:Cancelled)
# Answer to last question: be concise!
select(hflights, Year:DayOfWeek, ArrDelay:Diverted)
# Print out a tbl containing just ArrDelay and DepDelay
select(hflights, ends_with("Delay"))
# Print out a tbl as described in the second instruction, using both helper functions and variable names
select(hflights, UniqueCarrier, contains("Cancell"), ends_with("Num"))
# Print out a tbl as described in the third instruction, using only helper functions.
select(hflights, ends_with("Delay"), ends_with("Time"))
# Finish select call so that ex1d matches ex1r
ex1r <- hflights[c("TaxiIn", "TaxiOut", "Distance")]
ex1d <- select(hflights, starts_with("TaxI"), Distance)
# Finish select call so that ex2d matches ex2r
ex2r <- hflights[c("Year", "Month", "DayOfWeek", "DepTime", "ArrTime")]
ex2d <- select(hflights, Year:DayOfWeek, -3, DepTime, ArrTime)
# Finish select call so that ex3d matches ex3r
ex3r <- hflights[c("TailNum", "TaxiIn", "TaxiOut")]
ex3d <- select(hflights, starts_with("Ta"))
# Finish select call so that ex1d matches ex1r
ex1r <- hflights[c("TaxiIn", "TaxiOut", "Distance")]
ex1d <- select(hflights, starts_with("TaxI"), Distance)
ex1d
# Finish select call so that ex2d matches ex2r
ex2r <- hflights[c("Year", "Month", "DayOfWeek", "DepTime", "ArrTime")]
ex2d <- select(hflights, Year:DayOfWeek, -3, DepTime, ArrTime)
ex2d
# Finish select call so that ex3d matches ex3r
ex3r <- hflights[c("TailNum", "TaxiIn", "TaxiOut")]
ex3d <- select(hflights, starts_with("Ta"))
ex3d
g1 <- mutate(hflights, ActualGroundTime = ActualElapsedTime - AirTime)
# Add the new variable GroundTime to g1. Save the result as g2.
g2 <- mutate(g1, GroundTime = TaxiIn + TaxiOut)
# Add the new variable AverageSpeed to g2. Save the result as g3.
g3 <- mutate(g2, AverageSpeed = Distance / AirTime * 60)
g3
m1 <- mutate(hflights, loss = ArrDelay - DepDelay, loss_ratio = loss / DepDelay)
# Add the three variables as described in the third instruction: m2
m2 <- mutate(hflights, TotalTaxi = TaxiIn + TaxiOut, ActualGroundTime = ActualElapsedTime - AirTime, Diff = TotalTaxi - ActualGroundTime)
m1 <- mutate(hflights, loss = ArrDelay - DepDelay, loss_ratio = loss / DepDelay)
m1
# Add the three variables as described in the third instruction: m2
m2 <- mutate(hflights, TotalTaxi = TaxiIn + TaxiOut, ActualGroundTime = ActualElapsedTime - AirTime, Diff = TotalTaxi - ActualGroundTime)
m2
m1 <- mutate(hflights, loss = ArrDelay - DepDelay, loss_ratio = loss / DepDelay)
m1
# Add the three variables as described in the third instruction: m2
m2 <- mutate(hflights, TotalTaxi = TaxiIn + TaxiOut, ActualGroundTime = ActualElapsedTime - AirTime, Diff = TotalTaxi - ActualGroundTime)
m2
filter(hflights, Distance >= 3000)
head(hflights)
filter(hflights, Distance >= 3000)
filter(hflights, UniqueCarrier %in% c("JetBlue", "Southwest", "Delta"))
filter(hflights, TaxiIn + TaxiOut > AirTime)
library("dplyr")
# Load the hflights package
library("hflights")
filter(hflights, Distance >= 3000)
# All flights flown by one of JetBlue, Southwest, or Delta
filter(hflights, UniqueCarrier %in% c("JetBlue", "Southwest", "Delta"))
# All flights where taxiing took longer than flying
filter(hflights, TaxiIn + TaxiOut > AirTime)
# All flights that departed before 5am or arrived after 10pm
filter(hflights, ArrTime > 2200 | DepTime < 500 )
# All flights that departed late but arrived ahead of schedule
filter(hflights, DepDelay > 0, ArrDelay < 0 )
# All flights that were cancelled after being delayed
filter(hflights, DepDelay > 0, Cancelled == 1)
filter(hflights, ArrTime > 2200 | DepTime < 500 )
# All flights that departed late but arrived ahead of schedule
filter(hflights, DepDelay > 0, ArrDelay < 0 )
# All flights that were cancelled after being delayed
filter(hflights, DepDelay > 0, Cancelled == 1)
dtc <- filter(hflights, Cancelled == 1, !is.na(DepDelay))
# Arrange dtc by departure delays
arrange(dtc, DepDelay)
# Arrange dtc so that cancellation reasons are grouped
arrange(dtc, CancellationCode)
# Arrange dtc according to carrier and departure delays
arrange (dtc, UniqueCarrier, DepDelay)
# dplyr and the hflights tbl are available
# Arrange according to carrier and decreasing departure delays
arrange(hflights, UniqueCarrier, desc(DepDelay))
# Arrange flights by total delay (normal order).
df<- arrange(hflights, DepDelay + ArrDelay)
select(df, 12:13)
df1 <- mutate(df, Total= ArrDelay + DepDelay)
select(arrange(df1, Total),22)
arrange(hflights, UniqueCarrier, desc(DepDelay))
knitr::opts_chunk$set(echo = TRUE)
#Install package
#install.packages("dplyr")
#install.packages("hflights")
# Load the dplyr package
library("dplyr")
# Load the hflights package
library("hflights")
# Call both head() and summary() on hflights
head(hflights)
summary(hflights)
dim(hflights)
glimpse(hflights)
# Both the dplyr and hflights packages are loaded
# Convert the hflights data.frame into a hflights tbl
hflights <- tbl_df(hflights)
# Display the hflights tbl
hflights
# Create the object carriers
carriers <- hflights$UniqueCarrier
# Both the dplyr and hflights packages are loaded into workspace
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
# Add the Carrier column to hflights
hflights$Carrier <- lut[hflights$UniqueCarrier]
# Glimpse at hflights
glimpse(hflights)
# Both the dplyr and hflights packages are loaded into workspace
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
# Add the Carrier column to hflights
hflights$Carrier <- lut[hflights$UniqueCarrier]
# Glimpse at hflights
glimpse(hflights)
# The hflights tbl you built in the previous exercise is available in the workspace.
# The lookup table
lut <- c("A" = "carrier", "B" = "weather", "C" = "FFA", "D" = "security", "E" = "not cancelled")
# Add the Code column
hflights$Code <- lut[hflights$CancellationCode]
# Glimpse at hflights
glimpse(hflights)
# both hflights and dplyr are available
# Finish select call so that ex1d matches ex1r
ex1r <- hflights[c("TaxiIn", "TaxiOut", "Distance")]
ex1d <- select(hflights, starts_with("TaxI"), Distance)
ex1d
# Finish select call so that ex2d matches ex2r
ex2r <- hflights[c("Year", "Month", "DayOfWeek", "DepTime", "ArrTime")]
ex2d <- select(hflights, Year:DayOfWeek, -3, DepTime, ArrTime)
ex2d
# Finish select call so that ex3d matches ex3r
ex3r <- hflights[c("TailNum", "TaxiIn", "TaxiOut")]
ex3d <- select(hflights, starts_with("Ta"))
ex3d
# hflights is pre-loaded as a tbl, together with the necessary libraries.
# Print out a tbl with the four columns of hflights related to delay
select(hflights, ActualElapsedTime, AirTime, ArrDelay, DepDelay)
# Print out the columns Origin up to Cancelled of hflights
select(hflights, Origin:Cancelled)
# Answer to last question: be concise!
select(hflights, Year:DayOfWeek, ArrDelay:Diverted)
# As usual, hflights is pre-loaded as a tbl, together with the necessary libraries.
# Print out a tbl containing just ArrDelay and DepDelay
select(hflights, ends_with("Delay"))
# Print out a tbl as described in the second instruction, using both helper functions and variable names
select(hflights, UniqueCarrier, contains("Cancell"), ends_with("Num"))
# Print out a tbl as described in the third instruction, using only helper functions.
select(hflights, ends_with("Delay"), ends_with("Time"))
# hflights and dplyr are loaded and ready to serve you.
# Add the new variable ActualGroundTime to a copy of hflights and save the result as g1.
g1 <- mutate(hflights, ActualGroundTime = ActualElapsedTime - AirTime)
# Add the new variable GroundTime to g1. Save the result as g2.
g2 <- mutate(g1, GroundTime = TaxiIn + TaxiOut)
# Add the new variable AverageSpeed to g2. Save the result as g3.
g3 <- mutate(g2, AverageSpeed = Distance / AirTime * 60)
# Print out g3
g3
# hflights and dplyr are ready, are you?
# Add a second variable loss_ratio to the dataset: m1
m1 <- mutate(hflights, loss = ArrDelay - DepDelay, loss_ratio = loss / DepDelay)
m1
# Add the three variables as described in the third instruction: m2
m2 <- mutate(hflights, TotalTaxi = TaxiIn + TaxiOut, ActualGroundTime = ActualElapsedTime - AirTime, Diff = TotalTaxi - ActualGroundTime)
m2
# hflights is at your disposal as a tbl, with clean carrier names
# All flights that traveled 3000 miles or more
filter(hflights, Distance >= 3000)
# All flights flown by one of JetBlue, Southwest, or Delta
filter(hflights, UniqueCarrier %in% c("JetBlue", "Southwest", "Delta"))
# All flights where taxiing took longer than flying
filter(hflights, TaxiIn + TaxiOut > AirTime)
# hflights is at your service as a tbl!
# All flights that departed before 5am or arrived after 10pm
filter(hflights, ArrTime > 2200 | DepTime < 500 )
# All flights that departed late but arrived ahead of schedule
filter(hflights, DepDelay > 0, ArrDelay < 0 )
# All flights that were cancelled after being delayed
filter(hflights, DepDelay > 0, Cancelled == 1)
# hflights is at your service as a tbl!
# All flights that departed before 5am or arrived after 10pm
filter(hflights, ArrTime > 2200 | DepTime < 500 )
# All flights that departed late but arrived ahead of schedule
filter(hflights, DepDelay > 0, ArrDelay < 0 )
# All flights that were cancelled after being delayed
filter(hflights, DepDelay > 0, Cancelled == 1)
# dplyr and the hflights tbl are available
# Definition of dtc
dtc <- filter(hflights, Cancelled == 1, !is.na(DepDelay))
# Arrange dtc by departure delays
arrange(dtc, DepDelay)
# Arrange dtc so that cancellation reasons are grouped
arrange(dtc, CancellationCode)
# Arrange dtc according to carrier and departure delays
arrange (dtc, UniqueCarrier, DepDelay)
# dplyr and the hflights tbl are available
# Arrange according to carrier and decreasing departure delays
arrange(hflights, UniqueCarrier, desc(DepDelay))
# Arrange flights by total delay (normal order).
df<- arrange(hflights, DepDelay + ArrDelay)
select(df, 12:13)
df1 <- mutate(df, Total= ArrDelay + DepDelay)
select(arrange(df1, Total),22)
plot(pressure)
select(arrange(df1, Total),23)
hflights <- select(hflights, 1:21)
dim(hflights)
glimpse(hflights)
knitr::opts_chunk$set(echo = TRUE)
#Install package
#install.packages("dplyr")
#install.packages("hflights")
# Load the dplyr package
library("dplyr")
# Load the hflights package
library("hflights")
# Call both head() and summary() on hflights
head(hflights)
summary(hflights)
hflights <- select(hflights, 1:21)
dim(hflights)
glimpse(hflights)
# Both the dplyr and hflights packages are loaded
# Convert the hflights data.frame into a hflights tbl
hflights <- tbl_df(hflights)
# Display the hflights tbl
hflights
# Create the object carriers
carriers <- hflights$UniqueCarrier
# Both the dplyr and hflights packages are loaded into workspace
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
# Add the Carrier column to hflights
hflights$Carrier <- lut[hflights$UniqueCarrier]
# Glimpse at hflights
glimpse(hflights)
# Both the dplyr and hflights packages are loaded into workspace
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
# Add the Carrier column to hflights
hflights$Carrier <- lut[hflights$UniqueCarrier]
# Glimpse at hflights
glimpse(hflights)
# The hflights tbl you built in the previous exercise is available in the workspace.
# The lookup table
lut <- c("A" = "carrier", "B" = "weather", "C" = "FFA", "D" = "security", "E" = "not cancelled")
# Add the Code column
hflights$Code <- lut[hflights$CancellationCode]
# Glimpse at hflights
glimpse(hflights)
# both hflights and dplyr are available
# Finish select call so that ex1d matches ex1r
ex1r <- hflights[c("TaxiIn", "TaxiOut", "Distance")]
ex1d <- select(hflights, starts_with("TaxI"), Distance)
ex1d
# Finish select call so that ex2d matches ex2r
ex2r <- hflights[c("Year", "Month", "DayOfWeek", "DepTime", "ArrTime")]
ex2d <- select(hflights, Year:DayOfWeek, -3, DepTime, ArrTime)
ex2d
# Finish select call so that ex3d matches ex3r
ex3r <- hflights[c("TailNum", "TaxiIn", "TaxiOut")]
ex3d <- select(hflights, starts_with("Ta"))
ex3d
# hflights is pre-loaded as a tbl, together with the necessary libraries.
# Print out a tbl with the four columns of hflights related to delay
select(hflights, ActualElapsedTime, AirTime, ArrDelay, DepDelay)
# Print out the columns Origin up to Cancelled of hflights
select(hflights, Origin:Cancelled)
# Answer to last question: be concise!
select(hflights, Year:DayOfWeek, ArrDelay:Diverted)
# As usual, hflights is pre-loaded as a tbl, together with the necessary libraries.
# Print out a tbl containing just ArrDelay and DepDelay
select(hflights, ends_with("Delay"))
# Print out a tbl as described in the second instruction, using both helper functions and variable names
select(hflights, UniqueCarrier, contains("Cancell"), ends_with("Num"))
# Print out a tbl as described in the third instruction, using only helper functions.
select(hflights, ends_with("Delay"), ends_with("Time"))
# hflights and dplyr are loaded and ready to serve you.
# Add the new variable ActualGroundTime to a copy of hflights and save the result as g1.
g1 <- mutate(hflights, ActualGroundTime = ActualElapsedTime - AirTime)
# Add the new variable GroundTime to g1. Save the result as g2.
g2 <- mutate(g1, GroundTime = TaxiIn + TaxiOut)
# Add the new variable AverageSpeed to g2. Save the result as g3.
g3 <- mutate(g2, AverageSpeed = Distance / AirTime * 60)
# Print out g3
g3
# hflights and dplyr are ready, are you?
# Add a second variable loss_ratio to the dataset: m1
m1 <- mutate(hflights, loss = ArrDelay - DepDelay, loss_ratio = loss / DepDelay)
m1
# Add the three variables as described in the third instruction: m2
m2 <- mutate(hflights, TotalTaxi = TaxiIn + TaxiOut, ActualGroundTime = ActualElapsedTime - AirTime, Diff = TotalTaxi - ActualGroundTime)
m2
# hflights is at your disposal as a tbl, with clean carrier names
# All flights that traveled 3000 miles or more
filter(hflights, Distance >= 3000)
# All flights flown by one of JetBlue, Southwest, or Delta
filter(hflights, UniqueCarrier %in% c("JetBlue", "Southwest", "Delta"))
# All flights where taxiing took longer than flying
filter(hflights, TaxiIn + TaxiOut > AirTime)
# hflights is at your service as a tbl!
# All flights that departed before 5am or arrived after 10pm
filter(hflights, ArrTime > 2200 | DepTime < 500 )
# All flights that departed late but arrived ahead of schedule
filter(hflights, DepDelay > 0, ArrDelay < 0 )
# All flights that were cancelled after being delayed
filter(hflights, DepDelay > 0, Cancelled == 1)
# hflights is at your service as a tbl!
# All flights that departed before 5am or arrived after 10pm
filter(hflights, ArrTime > 2200 | DepTime < 500 )
# All flights that departed late but arrived ahead of schedule
filter(hflights, DepDelay > 0, ArrDelay < 0 )
# All flights that were cancelled after being delayed
filter(hflights, DepDelay > 0, Cancelled == 1)
# dplyr and the hflights tbl are available
# Definition of dtc
dtc <- filter(hflights, Cancelled == 1, !is.na(DepDelay))
# Arrange dtc by departure delays
arrange(dtc, DepDelay)
# Arrange dtc so that cancellation reasons are grouped
arrange(dtc, CancellationCode)
# Arrange dtc according to carrier and departure delays
arrange (dtc, UniqueCarrier, DepDelay)
# dplyr and the hflights tbl are available
# Arrange according to carrier and decreasing departure delays
arrange(hflights, UniqueCarrier, desc(DepDelay))
# Arrange flights by total delay (normal order).
df<- arrange(hflights, DepDelay + ArrDelay)
select(df, 12:13)
df1 <- mutate(df, Total= ArrDelay + DepDelay)
select(arrange(df1, Total),23)
plot(pressure)
rm(list = ls())
url <- "http://s3.amazonaws.com/assets.datacamp.com/course/dplyr/hflights.RData"
download.file(url, "hflights.RData")
load("hflights.RData")
flights <- as.data.frame(hflights)
View(flights)
View(hflights)
View(flights)
load("hflights.RData")
hflights <- as.data.frame(hflights)
rm(list = ls())
load("hflights.RData")
hflights <- as.data.frame(hflights)
View(hflights)
hflights <- tbl_df(hflights)
# Display the hflights tbl
hflights
# Create the object carriers
carriers <- hflights$UniqueCarrier
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
# Add the Carrier column to hflights
hflights$Carrier <- lut[hflights$UniqueCarrier]
# Glimpse at hflights
glimpse(hflights)
lut <- c("A" = "carrier", "B" = "weather", "C" = "FFA", "D" = "security", "E" = "not cancelled")
# Add the Code column
hflights$Code <- lut[hflights$CancellationCode]
# Glimpse at hflights
glimpse(hflights)
View(hflights)
rm(hflights)
load("hflights.RData")
hflights$Carrier <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",                              "DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")[hflights$UniqueCarrier]
hflights$CancellationCode[nchar(hflights$CancellationCode) == 0] <- "E"
lut <- c("A" = "carrier", "B" = "weather", "C" = "FFA", "D" = "security", "E" = "not cancelled")
# Add the Code column
hflights$Code <- lut[hflights$CancellationCode]
# Glimpse at hflights
glimpse(hflights)
ex1r <- hflights[c("TaxiIn", "TaxiOut", "Distance")]
ex1d <- select(hflights, starts_with("TaxI"), Distance)
ex1d
# Finish select call so that ex2d matches ex2r
ex2r <- hflights[c("Year", "Month", "DayOfWeek", "DepTime", "ArrTime")]
ex2d <- select(hflights, Year:DayOfWeek, -3, DepTime, ArrTime)
ex2d
# Finish select call so that ex3d matches ex3r
ex3r <- hflights[c("TailNum", "TaxiIn", "TaxiOut")]
ex3d <- select(hflights, starts_with("Ta"))
ex3d
select(hflights, ActualElapsedTime, AirTime, ArrDelay, DepDelay)
# Print out the columns Origin up to Cancelled of hflights
select(hflights, Origin:Cancelled)
# Answer to last question: be concise!
select(hflights, Year:DayOfWeek, ArrDelay:Diverted)
select(hflights, ends_with("Delay"))
# Print out a tbl as described in the second instruction, using both helper functions and variable names
select(hflights, UniqueCarrier, contains("Cancell"), ends_with("Num"))
# Print out a tbl as described in the third instruction, using only helper functions.
select(hflights, ends_with("Delay"), ends_with("Time"))
url <- "http://s3.amazonaws.com/assets.datacamp.com/course/dplyr/hflights2.RData"
download.file(url, "hflights2.RData")
load("hflights2.RData")
# Print out a tbl containing just ArrDelay and DepDelay
select(hflights, ends_with("Delay"))
# Print out a tbl as described in the second instruction, using both helper functions and variable names
select(hflights, UniqueCarrier, contains("Cancell"), ends_with("Num"))
# Print out a tbl as described in the third instruction, using only helper functions.
select(hflights, ends_with("Delay"), ends_with("Time"))
g1 <- mutate(hflights, ActualGroundTime = ActualElapsedTime - AirTime)
# Add the new variable GroundTime to g1. Save the result as g2.
g2 <- mutate(g1, GroundTime = TaxiIn + TaxiOut)
# Add the new variable AverageSpeed to g2. Save the result as g3.
g3 <- mutate(g2, AverageSpeed = Distance / AirTime * 60)
# Print out g3
g3
m1 <- mutate(hflights, loss = ArrDelay - DepDelay, loss_ratio = loss / DepDelay)
m1
# Add the three variables as described in the third instruction: m2
m2 <- mutate(hflights, TotalTaxi = TaxiIn + TaxiOut, ActualGroundTime = ActualElapsedTime - AirTime, Diff = TotalTaxi - ActualGroundTime)
m2
filter(hflights, Distance >= 3000)
# All flights flown by one of JetBlue, Southwest, or Delta
filter(hflights, UniqueCarrier %in% c("JetBlue", "Southwest", "Delta"))
# All flights where taxiing took longer than flying
filter(hflights, TaxiIn + TaxiOut > AirTime)
filter(hflights, ArrTime > 2200 | DepTime < 500 )
# All flights that departed late but arrived ahead of schedule
filter(hflights, DepDelay > 0, ArrDelay < 0 )
# All flights that were cancelled after being delayed
filter(hflights, DepDelay > 0, Cancelled == 1)
filter(hflights, ArrTime > 2200 | DepTime < 500 )
# All flights that departed late but arrived ahead of schedule
filter(hflights, DepDelay > 0, ArrDelay < 0 )
# All flights that were cancelled after being delayed
filter(hflights, DepDelay > 0, Cancelled == 1)
# hflights is already available in the workspace
# Select the flights that had JFK as their destination: c1
c1 <- filter(hflights, Dest == "JFK" )
# Combine the Year, Month and DayofMonth variables to create a Date column: c2
c2 <- mutate(c1, Date = paste(Year, Month, DayofMonth, sep="-"))
# Print out a selection of columns of c2
select(c2, Date, DepTime, ArrTime, TailNum)
c1 <- filter(hflights, Dest == "JFK" )
c1
# Combine the Year, Month and DayofMonth variables to create a Date column: c2
c2 <- mutate(c1, Date = paste(Year, Month, DayofMonth, sep="-"))
c2
# Print out a selection of columns of c2
select(c2, Date, DepTime, ArrTime, TailNum)
dtc <- filter(hflights, Cancelled == 1, !is.na(DepDelay))
# Arrange dtc by departure delays
arrange(dtc, DepDelay)
# Arrange dtc so that cancellation reasons are grouped
arrange(dtc, CancellationCode)
# Arrange dtc according to carrier and departure delays
arrange (dtc, UniqueCarrier, DepDelay)
arrange(hflights, UniqueCarrier, desc(DepDelay))
# Arrange flights by total delay (normal order).
df<- arrange(hflights, DepDelay + ArrDelay)
select(df, 12:13)
df1 <- mutate(df, Total= ArrDelay + DepDelay)
select(arrange(df1, Total),23)
select(arrange(df1, Total),22)
arrange(hflights, UniqueCarrier, desc(DepDelay))
# Arrange flights by total delay (normal order).
df<- arrange(hflights, DepDelay + ArrDelay)
select(df, 12:13)
df1 <- mutate(df, Total= ArrDelay + DepDelay)
select(arrange(df1, Total),22)
glimpse(hflights)
arrange(hflights, UniqueCarrier, desc(DepDelay))
# Arrange flights by total delay (normal order).
df<- arrange(hflights, DepDelay + ArrDelay)
select(df, 12:13)
df1 <- mutate(df, Total= ArrDelay + DepDelay)
select(arrange(df1, Total),22)
# hflights and dplyr are loaded in the workspace
# Print out a summary with variables min_dist and max_dist
summarise(hflights, min_dist = min(Distance), max_dist = max(Distance))
# Print out a summary with variable max_div
summarise(filter(hflights, Diverted == 1), max_div = max(Distance))
# Remove rows that have NA ArrDelay: temp1
temp1 <- filter(hflights, !is.na(ArrDelay))
# Generate summary about ArrDelay column of temp1
summarise(temp1, earliest = min(ArrDelay), average = mean(ArrDelay), latest = max(ArrDelay), sd = sd(ArrDelay))
# Keep rows that have no NA TaxiIn and no NA TaxiOut: temp2
temp2 <- filter(hflights, !is.na(TaxiIn), !is.na(TaxiOut))
# Print the maximum taxiing difference of temp2 with summarise()
summarise(temp2, max_taxi_diff = max(abs(TaxiIn - TaxiOut)))
